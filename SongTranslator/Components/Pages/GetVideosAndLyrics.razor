@using SongTranslator.Services
@using SongTranslator.Components.Data
@using System.Text.Json;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using System.Diagnostics;
@using Google.Apis.YouTube.v3
@inject Google.Apis.YouTube.v3.YouTubeService YouTubeService
@inject IMediaFetchService IMediaFetchService

<div class="input-group">
    <input @bind="artistName" class="form-control" placeholder="Artist Name" />
    <input @bind="songName" class="form-control" placeholder="Song Name" />
    <button class="searchButtonForFetching" @onclick="GetResult">Search</button>
</div>


@* <p>@errorMessageYoutube</p> *@
@* <p>@errorMessageLyrics</p> *@
 <div style="display: flex;justify-content: center;">
    <p class="errorMessageInput">@errorMessageInput</p>
</div>


@if (loading)
{
    <div style="display: flex;justify-content: center;">
        <span class="loader"></span>
    </div>
}

<div class="video-lyrics-container">

    @* Display video *@
    @if (videos.Any())
    {
        <div class="single-video-box">
            <iframe width="640" height="360"
            src="https://www.youtube.com/embed/@videos.First().VideoId?autoplay=1"
            frameborder="0" />
        </div>
    }
    else
    {
        <div class="single-video-box-placeholder">
            <p>@youtubeBoxMessage</p>
        </div>
    }

    @* Display lyrics *@
    @if (!lyrics.Equals("Response is null") && !string.IsNullOrEmpty(lyrics))
    {

        <div class="lyrics-container">
            <p>@lyrics</p>
        </div>
    }else{
        <div class="lyrics-box-placeholder">
            <p>
                🎵 No lyrics yet! Search for some 🔍
            </p>
        </div>
    }
</div>

@* Display recommended videos *@


@if (videos.Any()){
     <div class="display-recommendations">
                <h3>Recommended:</h3>
      </div>

    <div class="recommended-videos">
        @foreach (var video in videos.Skip(1))
        {
            <div class="recommendedVideoCard">
                <figure class="recommendedVideoCardFigure">
                    <a href="https://www.youtube.com/watch?v=@video.VideoId" title="@video.Title" target="_blank" rel="noopener noreferrer">
                        <img src="@video.Thumbnail" class="recommendedVideoThumb" alt="@video.Title">
                    </a>
                    <figcaption class="recommendedVideoTitle">@video.Title</figcaption>
                </figure>
            </div>
        }
    </div>
}


@if (fetchedLyricsVideo.Any())
{
    <div class="fetchedVideoAndLyrics">
        <div class="lyrics-toolbar">
            <button class="toggle-btn" @onclick="SortByTitleAscending">Songs first (or A-Z)</button>

            <button class="toggle-btn" @onclick="SortByTitleDescending">Lyrics first (or Z-A)</button>
        </div>

        @* <div class="lyrics-toolbar"> *@
        @*     <button class="toggle-btn" @onclick="SortByTitleDescending">A-Z</button> *@
        @*     <button class="toggle-btn" @onclick="SortByTitleAscending">Z-A</button> *@
        @* </div> *@

        @foreach (var media in fetchedLyricsVideo)
        {
            <div class="media-card">
                <h4 class="media-title">@media.Title</h4>

                @if (media.Source == MediaSourceEnum.YouTubeVideo && media is YouTubeVideo video)
                {
                    <a href="@video.Url" target="_blank" class="media-link">
                        🎵 Click to Listen and Watch on YouTube
                    </a>
                }

                @if (media.Source == MediaSourceEnum.Lyrics && media is SongLyrics lyrics) 
                 { 
                    <div class="lyrics-box"> 
                        <p>@lyrics.Lyrics</p> 
                    </div> 
                }
            </div>
        }
    </div>
}


@code {
    private FetchLyricsService lyricsService = new FetchLyricsService(new RestSharp.RestClient("https://api.lyrics.ovh/v1/"));
    private List<YouTubeVideo> videos = new List<YouTubeVideo>();

    private List<MediaData> fetchedLyricsVideo = new List<MediaData>();

    private string artistName = "";
    private string songName = "";
    private string searchQuery = "";

    private string lyrics = "";
    private string youtubeBoxMessage = "😎🎵 No video found yet! Try searching 🔍";


    private string errorMessageYoutube = "";
    private string errorMessageLyrics = "";
    private string errorMessageInput = "";

    private bool loading = false;

    private async Task SearchYouTube()
    {

        await Task.Delay(300);

        try
        {
            searchQuery = artistName + " " + songName;
            var searchListRequest = YouTubeService.Search.List("snippet");
            searchListRequest.Q = searchQuery;
            searchListRequest.Type = "video";
            searchListRequest.MaxResults = 6;
            searchListRequest.Order = SearchResource.ListRequest.OrderEnum.Relevance;


            searchListRequest.Order = Google.Apis.YouTube.v3.SearchResource.ListRequest.OrderEnum.Relevance;

            var searchListResponse = await searchListRequest.ExecuteAsync();

            if (searchListResponse.Items == null || !searchListResponse.Items.Any() )
            {
                youtubeBoxMessage = "🎶😅 Oops! No YouTube results for this track.";
                return;
            }

            videos.AddRange(searchListResponse.Items.Select(video => new YouTubeVideo
                {
                    Title = video.Snippet.Title,
                    Thumbnail = video.Snippet.Thumbnails?.High?.Url ?? "",
                    VideoId = video.Id.VideoId,
                    Source = MediaSourceEnum.YouTubeVideo
                }));

            fetchedLyricsVideo.Add(videos.First());

        }
        catch (Exception ex)
        {
            errorMessageYoutube = ex.Message;
        }
    }


    private async Task FetchLyrics()
    {
        // debugMessage = "clicked";
        Console.WriteLine("clicked");
        try
        {
            

            lyrics = await lyricsService.LyricsTextAsync(artistName, songName);

            if (string.IsNullOrEmpty(lyrics) || lyrics.Equals("Response is null") || lyrics.Equals("Unexpected character encountered while parsing value: <. Path '', line 0, position 0."))
            {

                errorMessageLyrics = ""; 
                lyrics = "🤔🎶 Hmm... No lyrics found for this song. 🔍";
                return;
            }

            var singleSongLyrics = new SongLyrics
                {
                    Artist = artistName,
                    SongName = songName,
                    Lyrics = lyrics,
                    Title = artistName + ": "+songName +" - lyrics",
                    Source = MediaSourceEnum.Lyrics
                };

            fetchedLyricsVideo.Add(singleSongLyrics);
        }
        catch (Exception ex)
        {
            // errorMessageLyrics = ex.Message;
            lyrics = "🤔🎶 Hmm... No lyrics found for this song. 🔍";

        }
    }

    private async Task GetResult()
    {
        errorMessageInput = "";
        errorMessageYoutube = "";
        errorMessageLyrics = "";
        lyrics = "";
        videos.Clear();

        if (IMediaFetchService.ValidateInput(artistName, songName))
        {
            try
            {
                videos.Clear();
                loading = true;
                await SearchYouTube();
                StateHasChanged();

                await FetchLyrics();
                SortByTitleDescending();


                StateHasChanged();

            }
            finally
            {
                loading = false;
                StateHasChanged();
            }
        }
        else
        {
            errorMessageInput = "😅🔎 Oops! You need to fill in the search first.";
            return;
        }
    }

    private void SortByTitleAscending()
    {
        fetchedLyricsVideo = IMediaFetchService.SortListAscending(fetchedLyricsVideo);
    }

    private void SortByTitleDescending()
    {
        fetchedLyricsVideo = IMediaFetchService.SortListDescending(fetchedLyricsVideo);
    }
}
